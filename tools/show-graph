#!/usr/bin/env python3

# Software Name : uprofile
# SPDX-FileCopyrightText: Copyright (c) 2022 Orange
# SPDX-License-Identifier: BSD-3-Clause
#
# This software is distributed under the BSD License;
# see the LICENSE file for more details.
#
# Author: CÃ©dric CHEDALEUX <cedric.chedaleux@orange.com> et al.


import argparse
import plotly.figure_factory as ff
from plotly.subplots import make_subplots
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd


def extract_data(file):
    time_exec_list = []
    # TO REWRITE: Hard code 4 CPUs
    cpu_list_0 = {'time': [], 'load': []}
    cpu_list_1 = {'time': [], 'load': []}
    cpu_list_2 = {'time': [], 'load': []}
    cpu_list_3 = {'time': [], 'load': []}
    for line in file:
        d = line.split(';')

        # Handle 'time_exec' metrics (format is 'time_exec:<end_timestamp>:<start_timestamp>:<task_name>')
        if d[0] == 'time_exec':
            task = d[3]
            end_timestamp = int(d[1])
            start_timestamp = int(d[2])
            duration = start_timestamp - end_timestamp
            time_exec_list.append({'Task': task, 'Start': start_timestamp, 'Finish': end_timestamp,
                                   'Description': "Task: {} (duration = {} ms)".format(task, duration)})
        # Handle 'cpu' metrics' (format is 'cpu:<timestamp>:<cpu_number>:<percentage_usage>')
        elif d[0] == 'cpu':
            timestamp = d[1]
            cpu_load = float(d[3])
            if d[2] == '0':
                cpu_list_0['time'].append(timestamp)
                cpu_list_0['load'].append(cpu_load)
            elif d[2] == '1':
                cpu_list_1['time'].append(timestamp)
                cpu_list_1['load'].append(cpu_load)
            elif d[2] == '2':
                cpu_list_2['time'].append(timestamp)
                cpu_list_2['load'].append(cpu_load)
            elif d[2] == '3':
                cpu_list_3['time'].append(timestamp)
                cpu_list_3['load'].append(cpu_load)

    data = {'time_exec': time_exec_list, 'cpu_0': cpu_list_0, 'cpu_1': cpu_list_1, 'cpu_2': cpu_list_2,
            'cpu_3': cpu_list_3}
    return data


def create_gantt_graph(timeline_data):
    df = pd.DataFrame(timeline_data)
    df['Finish'] = pd.to_datetime(df['Finish'], unit='ms')
    df['Start'] = pd.to_datetime(df['Start'], unit='ms')
    size = len(df['Start'])
    colors = px.colors.sample_colorscale("turbo", [n / (size - 1) for n in range(size)])
    return ff.create_gantt(df, colors=colors, show_colorbar=True, showgrid_x=True, showgrid_y=True,
                           show_hover_fill=True)


def create_cpu_graph(cpu_data, name):
    df = pd.DataFrame(cpu_data)
    df['time'] = pd.to_datetime(df['time'], unit='ms')
    return go.Scatter(x=df['time'], y=df['load'], name=name, showlegend=True)


# To represent task duration, let's use a Gantt diagram
# (see https://chart-studio.plotly.com/~empet/15242/gantt-chart-in-a-subplot-httpscommun/ and https://plotly.com/python/gantt/)
def main():
    """
    Show the duration task graph and the cpu usage graph on a single view
    The tools reads the metrics file generated by the uprofile library
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('INPUT_FILE', type=str, help='Input file that contains profiling data')
    args = parser.parse_args()

    if args.INPUT_FILE is None:
        parser.error('no INPUT_FILE given')

    # For Multiple subplots: see https://plotly.com/python/subplots/
    figs = make_subplots(rows=2,
                         cols=1,
                         shared_xaxes=True,
                         row_heights=[0.8, 0.2],
                         vertical_spacing=0.05,
                         subplot_titles=("Execution graph", "CPU(s) load")
                         )

    with open(args.INPUT_FILE) as file:
        data = extract_data(file)
        for trace in create_gantt_graph(data['time_exec']).data:
            figs.add_trace(trace, row=1, col=1)
        figs.add_trace(create_cpu_graph(data['cpu_0'], "CPU 0"), row=2, col=1)
        figs.add_trace(create_cpu_graph(data['cpu_1'], "CPU 1"), row=2, col=1)
        figs.add_trace(create_cpu_graph(data['cpu_2'], "CPU 2"), row=2, col=1)
        figs.add_trace(create_cpu_graph(data['cpu_3'], "CPU 3"), row=2, col=1)

    figs.update_layout(
        height=1200,
        xaxis_tickformat='%M:%S',
        showlegend=False
    )

    figs.show()
    figs.write_html("profiling.html")


if __name__ == '__main__':
    main()
